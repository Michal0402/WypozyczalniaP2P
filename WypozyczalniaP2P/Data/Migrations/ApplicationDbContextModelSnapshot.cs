// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WypozyczalniaP2P.Data;

#nullable disable

namespace WypozyczalniaP2P.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Ogloszenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CenaZaDzien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("KlientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SamochodId")
                        .HasColumnType("int");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.HasIndex("SamochodId");

                    b.ToTable("Ogłoszenia");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.OpiniaKlienta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AutorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("datetime2");

                    b.Property<string>("KlientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Komentarz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("KlientId");

                    b.ToTable("OpinieKlientow");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.OpiniaSamochodu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AutorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataDodania")
                        .HasColumnType("datetime2");

                    b.Property<string>("Komentarz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.Property<int>("SamochodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("SamochodId");

                    b.ToTable("OpinieSamochodow");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Samochod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CzyDostepny")
                        .HasColumnType("bit");

                    b.Property<int>("IloscDrzwi")
                        .HasColumnType("int");

                    b.Property<int>("Kolor")
                        .HasColumnType("int");

                    b.Property<int>("LiczbaMiejsc")
                        .HasColumnType("int");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MocSilnika")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumerRejestracyjny")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<float>("PojemnoscSilnika")
                        .HasColumnType("real");

                    b.Property<int>("Przebieg")
                        .HasColumnType("int");

                    b.Property<int>("RodzajNapedu")
                        .HasColumnType("int");

                    b.Property<int>("RodzajPaliwa")
                        .HasColumnType("int");

                    b.Property<int>("RokProdukcji")
                        .HasColumnType("int");

                    b.Property<int>("Skrzynia")
                        .HasColumnType("int");

                    b.Property<int>("TypSamochoduId")
                        .HasColumnType("int");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("WlascicielId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Zdjecie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NumerRejestracyjny")
                        .IsUnique();

                    b.HasIndex("TypSamochoduId");

                    b.HasIndex("Vin")
                        .IsUnique();

                    b.HasIndex("WlascicielId");

                    b.ToTable("Samochody");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CzyDostepny = true,
                            IloscDrzwi = 1,
                            Kolor = 1,
                            LiczbaMiejsc = 2,
                            Marka = "Toyota",
                            MocSilnika = 132,
                            Model = "Corolla",
                            NumerRejestracyjny = "WWA1234",
                            PojemnoscSilnika = 2f,
                            Przebieg = 45000,
                            RodzajNapedu = 0,
                            RodzajPaliwa = 0,
                            RokProdukcji = 2019,
                            Skrzynia = 1,
                            TypSamochoduId = 1,
                            Vin = "JTDBR32E042013579",
                            WlascicielId = "85b4c380-cb76-41ff-9387-eed59e4040a2",
                            Zdjecie = "default.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CzyDostepny = true,
                            IloscDrzwi = 2,
                            Kolor = 7,
                            LiczbaMiejsc = 2,
                            Marka = "Volkswagen",
                            MocSilnika = 150,
                            Model = "Tiguan",
                            NumerRejestracyjny = "WRO5678",
                            PojemnoscSilnika = 3f,
                            Przebieg = 30000,
                            RodzajNapedu = 2,
                            RodzajPaliwa = 1,
                            RokProdukcji = 2020,
                            Skrzynia = 0,
                            TypSamochoduId = 2,
                            Vin = "WVGZZZ5NZLW123456",
                            WlascicielId = "85b4c380-cb76-41ff-9387-eed59e4040a2",
                            Zdjecie = "default.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CzyDostepny = true,
                            IloscDrzwi = 2,
                            Kolor = 2,
                            LiczbaMiejsc = 2,
                            Marka = "Ford",
                            MocSilnika = 100,
                            Model = "Fiesta",
                            NumerRejestracyjny = "KRA9012",
                            PojemnoscSilnika = 1f,
                            Przebieg = 60000,
                            RodzajNapedu = 0,
                            RodzajPaliwa = 0,
                            RokProdukcji = 2018,
                            Skrzynia = 0,
                            TypSamochoduId = 3,
                            Vin = "WF0DXXGAJD1234567",
                            WlascicielId = "85b4c380-cb76-41ff-9387-eed59e4040a2",
                            Zdjecie = "default.jpg"
                        });
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.TypSamochodu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TypySamochodow");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nazwa = "Sedan",
                            Opis = "Rodzinna limuzyna"
                        },
                        new
                        {
                            Id = 2,
                            Nazwa = "SUV",
                            Opis = "Duże auto"
                        },
                        new
                        {
                            Id = 3,
                            Nazwa = "Hatchback",
                            Opis = "Miejskie auto"
                        },
                        new
                        {
                            Id = 4,
                            Nazwa = "Combi",
                            Opis = "Długie auto"
                        });
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Wynajem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CalkowityKosztWynajmu")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DataRozpoczecia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataZakonczenia")
                        .HasColumnType("datetime2");

                    b.Property<int>("IloscDni")
                        .HasColumnType("int");

                    b.Property<string>("KlientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SamochodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.HasIndex("SamochodId");

                    b.ToTable("Wynajmy");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Wypozyczenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataRozpoczecia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataZakonczenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("KlientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SamochodId")
                        .HasColumnType("int");

                    b.Property<string>("WypozyczajacyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.HasIndex("SamochodId");

                    b.HasIndex("WypozyczajacyId");

                    b.ToTable("Wypozyczenia");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Administrator", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Administratorzy", (string)null);
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Klient", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Miejscowosc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumerPrawaJazdy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasIndex("NumerPrawaJazdy")
                        .IsUnique()
                        .HasFilter("[NumerPrawaJazdy] IS NOT NULL");

                    b.ToTable("Klienci", (string)null);
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Pracownik", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Pracownicy", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Ogloszenie", b =>
                {
                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Klient")
                        .WithMany("Ogloszenia")
                        .HasForeignKey("KlientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaP2P.Models.Samochod", "Samochod")
                        .WithMany("Ogloszenia")
                        .HasForeignKey("SamochodId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Samochod");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.OpiniaKlienta", b =>
                {
                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Autor")
                        .WithMany("MojeOpinieKlientow")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Klient")
                        .WithMany("OpinieWypozyczen")
                        .HasForeignKey("KlientId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Autor");

                    b.Navigation("Klient");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.OpiniaSamochodu", b =>
                {
                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Autor")
                        .WithMany("MojeOpinieSamochodow")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaP2P.Models.Samochod", "Samochod")
                        .WithMany("Opinie")
                        .HasForeignKey("SamochodId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Samochod");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Samochod", b =>
                {
                    b.HasOne("WypozyczalniaP2P.Models.TypSamochodu", "TypSamochodu")
                        .WithMany("Samochody")
                        .HasForeignKey("TypSamochoduId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Wlasciciel")
                        .WithMany("Flota")
                        .HasForeignKey("WlascicielId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypSamochodu");

                    b.Navigation("Wlasciciel");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Wynajem", b =>
                {
                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Klient")
                        .WithMany("Wynajmy")
                        .HasForeignKey("KlientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaP2P.Models.Samochod", "Samochod")
                        .WithMany("Wynajmy")
                        .HasForeignKey("SamochodId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Samochod");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Wypozyczenie", b =>
                {
                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Klient")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("KlientId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaP2P.Models.Samochod", "Samochod")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("SamochodId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WypozyczalniaP2P.Models.Klient", "Wypozyczajacy")
                        .WithMany("Wypozyczone")
                        .HasForeignKey("WypozyczajacyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Klient");

                    b.Navigation("Samochod");

                    b.Navigation("Wypozyczajacy");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Administrator", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WypozyczalniaP2P.Models.Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Klient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WypozyczalniaP2P.Models.Klient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Pracownik", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WypozyczalniaP2P.Models.Pracownik", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Samochod", b =>
                {
                    b.Navigation("Ogloszenia");

                    b.Navigation("Opinie");

                    b.Navigation("Wynajmy");

                    b.Navigation("Wypozyczenia");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.TypSamochodu", b =>
                {
                    b.Navigation("Samochody");
                });

            modelBuilder.Entity("WypozyczalniaP2P.Models.Klient", b =>
                {
                    b.Navigation("Flota");

                    b.Navigation("MojeOpinieKlientow");

                    b.Navigation("MojeOpinieSamochodow");

                    b.Navigation("Ogloszenia");

                    b.Navigation("OpinieWypozyczen");

                    b.Navigation("Wynajmy");

                    b.Navigation("Wypozyczenia");

                    b.Navigation("Wypozyczone");
                });
#pragma warning restore 612, 618
        }
    }
}
