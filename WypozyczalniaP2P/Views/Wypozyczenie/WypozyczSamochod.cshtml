@model WypozyczalniaP2P.Models.Wypozyczenie

@{
    var samochod = ViewBag.Samochod as WypozyczalniaP2P.Models.Samochod;
    var ogloszenieId = ViewBag.OgloszenieId as int?;
    var cenaZaDzien = ViewBag.CenaZaDzien as decimal?;
}

<h1>Wypożycz: @samochod.Marka @samochod.Model</h1>

<div id="calendar" style="max-width: 600px; margin: 20px auto; font-size: 12px;"></div>

<div asp-validation-summary="All" class="text-danger"></div>

<form asp-action="WypozyczSamochod" method="post" class="form-container">
    <input type="hidden" asp-for="SamochodId" />
    <input type="hidden" asp-for="KlientId" />
    <input type="hidden" asp-for="WypozyczajacyId" />

    <div class="form-group">
        <label class="control-label">Samochód</label>
        <input class="form-control" value="@samochod.Marka @samochod.Model" readonly />
    </div>
    <div class="form-group">
        <label class="control-label">Klient</label>
        <input class="form-control" value="@User.Identity.Name" readonly />
    </div>
    <div class="form-group">
        <label class="control-label">Wypożyczający</label>
        <input class="form-control" value="@samochod.Wlasciciel?.Email" readonly />
    </div>
    <div class="form-group">
        <label class="control-label">Cena za dobę</label>
        <input class="form-control" value="@cenaZaDzien?.ToString("C", new System.Globalization.CultureInfo("pl-PL"))" readonly />
    </div>
    <div class="form-group">
        <label class="control-label">Całkowita cena</label>
        <input class="form-control" id="TotalPriceDisplay" readonly />
    </div>
    <div class="form-group">
        <label asp-for="DataRozpoczecia" class="control-label">Od</label>
        <input asp-for="DataRozpoczecia" id="DataRozpoczecia" class="form-control" type="date" required />
        <span asp-validation-for="DataRozpoczecia" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="DataZakonczenia" class="control-label">Do</label>
        <input asp-for="DataZakonczenia" id="DataZakonczenia" class="form-control" type="date" required />
        <span asp-validation-for="DataZakonczenia" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Wypożycz" class="btn btn-primary" />
        <a asp-action="SzczegolyOgloszenia" asp-controller="Ogloszenie" asp-route-id="@ogloszenieId" class="btn btn-secondary">Wróć</a>
    </div>
</form>

<style>
    .form-container {
        max-width: 600px;
        margin: 20px auto;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        font-size: 14px;
    }

    .btn {
        margin-right: 10px;
    }

    #calendar .fc-daygrid-day {
        height: 50px;
    }

        #calendar .fc-daygrid-day.fc-day-past {
            background-color: #f0f0f0;
        }

        #calendar .fc-daygrid-day:not(.fc-day-disabled) {
            background-color: #e6ffe6;
        }

    .fc-day-selected {
        background-color: #add8e6 !important; /* Jasnoniebieskie podświetlenie dla daty początkowej */
    }
</style>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var carId = @Model.SamochodId;
            var calendarEl = document.getElementById('calendar');
            

            if (!calendarEl) {
                console.error('Element kalendarza nie został znaleziony!');
                return;
            }

            var startDate = null;
            var calendar = null;

            fetch('/Wypozyczenie/GetOccupiedDates?carId=' + carId)
                .then(response => {
                    if (!response.ok) throw new Error('Błąd sieci: ' + response.statusText);
                    return response.json();
                })
                .then(data => {

                    calendar = new FullCalendar.Calendar(calendarEl, {
                        initialView: 'dayGridMonth',
                        height: 'auto',
                        locale: 'pl',
                        events: data.map(event => ({
                            start: event.start,
                            end: event.end,
                            backgroundColor: 'red',
                            borderColor: 'red',
                            display: 'background',
                            allDay: true
                        })),
                        validRange: {
                            start: new Date().toISOString().split('T')[0]
                        },
                        dateClick: function (info) {
                            var selectedDate = info.dateStr;
                            var today = new Date().toISOString().split('T')[0];

                            // Sprawdź, czy data nie jest w przeszłości
                            if (selectedDate < today) {
                                return;
                            }

                            // Sprawdź, czy data nie jest zajęta
                            var isOccupied = calendar.getEvents().some(event => {
                                var eventEndExclusive = new Date(event.end);
                                return new Date(event.start) <= new Date(selectedDate) && new Date(selectedDate) < eventEndExclusive;
                            });

                            if (isOccupied) {
                                alert('Wybrana data jest zajęta!');
                                return;
                            }

                            if (!startDate) {
                                // Pierwsze kliknięcie: ustaw datę początkową
                                startDate = selectedDate;
                                info.dayEl.classList.add('fc-day-selected');
                                document.getElementById('DataRozpoczecia').value = startDate;
                                document.getElementById('DataZakonczenia').value = '';
                            } else {
                                // Drugie kliknięcie: ustaw datę końcową
                                var endDate = selectedDate;

                                // Sprawdź, czy data końcowa jest po dacie początkowej
                                if (endDate <= startDate) {
                                    alert('Data zakończenia musi być późniejsza niż data rozpoczęcia!');
                                    return;
                                }

                                // Sprawdź, czy zakres nie koliduje z zajętych terminami
                                var isRangeOccupied = calendar.getEvents().some(event => {
                                    var eventEndExclusive = new Date(event.end);
                                    return (
                                        (new Date(startDate) < eventEndExclusive && new Date(startDate) >= event.start) ||
                                        (new Date(endDate) < eventEndExclusive && new Date(endDate) >= event.start) ||
                                        (new Date(startDate) <= event.start && new Date(endDate) >= eventEndExclusive)
                                    );
                                });

                                if (isRangeOccupied) {
                                    alert('Wybrany zakres koliduje z zajętych terminami!');
                                    return;
                                }

                                // Wypełnij pole daty końcowej
                                document.getElementById('DataZakonczenia').value = endDate;

                                // Usuń poprzednie tymczasowe wydarzenie, jeśli istnieje
                                var tempEvent = calendar.getEventById('temp-selection');
                                if (tempEvent) {
                                    tempEvent.remove();
                                }

                                // Dodaj tymczasowe wydarzenie dla wybranego zakresu (włącznie z datą końcową)
                                calendar.addEvent({
                                    id: 'temp-selection',
                                    start: startDate,
                                    end: new Date(new Date(endDate).setDate(new Date(endDate).getDate() + 1)).toISOString().split('T')[0], // Wyłączna data końca
                                    backgroundColor: '#3788d8',
                                    borderColor: '#3788d8',
                                    display: 'background',
                                    allDay: true
                                });

                                // Usuń podświetlenie pojedynczych dni
                                document.querySelectorAll('.fc-day-selected').forEach(el => {
                                    el.classList.remove('fc-day-selected');
                                });

                                // Resetuj wybór
                                startDate = null;
                            }
                        }
                    });

                    // Obsługa kliknięcia prawym przyciskiem myszy (reset wyboru)
                    calendarEl.addEventListener('contextmenu', function (e) {
                        e.preventDefault(); // Zablokuj domyślne menu kontekstowe
                        startDate = null; // Zresetuj datę początkową
                        document.getElementById('DataRozpoczecia').value = ''; // Wyczyść pole początkowe
                        document.getElementById('DataZakonczenia').value = ''; // Wyczyść pole końcowe
                        var tempEvent = calendar.getEventById('temp-selection'); // Usuń tymczasowe wydarzenie
                        if (tempEvent) {
                            tempEvent.remove();
                        }
                        // Usuń podświetlenie pojedynczych dni
                        document.querySelectorAll('.fc-day-selected').forEach(el => {
                            el.classList.remove('fc-day-selected');
                        });
                    });

                    calendar.render();
                })
                .catch(error => {
                    console.error('Błąd ładowania danych kalendarza:', error);
                });
        });
    </script>
}